# Day 9

```elixir
Mix.install(
  [
    {:advent_of_code_utils, "~> 3.1"},
    {:kino, "~> 0.8.0"}
  ],
  config: [
    advent_of_code_utils: [session: System.fetch_env!("LB_AOC_TOKEN")]
  ]
)

Mix.Tasks.Aoc.Get.run(["--year", "2022", "--day", "9"])
```

## Inputs

```elixir
# Override example
example_input = "R 4\nU 4\nL 3\nD 1\nR 4\nD 1\nL 5\nR 2\n"
```

```elixir
input = AOC.input_string(2022, 9)
```

## Parser

```elixir
defmodule Parser do
  def convert(input, :pass) do
    input
  end

  def convert(_input, :drop) do
    :to_be_dropped
  end

  def convert(input, :to_integer) do
    String.to_integer(input)
  end

  def convert(input, :to_atom) do
    String.to_atom(input)
  end

  def convert(inputs, converters) when is_list(inputs) and is_list(converters) do
    Enum.zip(inputs, converters)
    |> Enum.map(fn {input, converter} ->
      convert(input, converter)
    end)
    |> Enum.reject(&(&1 == :to_be_dropped))
    |> List.to_tuple()
  end

  def parse_line(line) do
    line
    |> String.split(" ", trim: true)
    |> then(&convert(&1, [:to_atom, :to_integer]))
  end

  def parse(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&parse_line/1)
  end
end
```

```elixir
Parser.parse(example_input)
```

## Simple SVG Draw

```elixir
defmodule SVGDraw do
  def new(width, height, options \\ []) do
    %{
      width: width,
      height: height,
      shapes: [],
      state: %{
        fill: "black",
        stroke: "black",
        stroke_width: "1"
      },
      options: options
    }
  end

  ## User facing functions

  def circle(svg, cx, cy, r) do
    add_to_shapes(svg, {:circle, cx, cy, r})
  end

  def rectangle(svg, x, y, width, height) do
    add_to_shapes(svg, {:rectangle, x, y, width, height, 0, 0})
  end

  def square(svg, x, y, size) do
    add_to_shapes(svg, {:rectangle, x, y, size, size, 0, 0})
  end

  def line(svg, {x1, y1}, {x2, y2}), do: line(svg, x1, y1, x2, y2)

  def line(svg, x1, y1, x2, y2) do
    add_to_shapes(svg, {:line, x1, y1, x2, y2})
  end

  def set_stroke(svg, color) do
    add_to_shapes(svg, {:set_stroke, color})
  end

  def set_fill(svg, color) do
    add_to_shapes(svg, {:set_fill, color})
  end

  def set_color(svg, color) do
    svg
    |> add_to_shapes({:set_fill, color})
    |> add_to_shapes({:set_stroke, color})
  end

  def set_stroke_width(svg, color) do
    add_to_shapes(svg, {:set_stroke_width, color})
  end

  ## Convert the shapes to strings

  def draw({:circle, cx, cy, r}, state) do
    {
      ~s(<circle cx="#{cx}" cy="#{cy}" r="#{r}" #{state_to_attributes(state)} />),
      state
    }
  end

  def draw({:rectangle, x, y, width, height, rx, ry}, state) do
    {
      ~s(<rect x="#{x}" y="#{y}" width="#{width}" height="#{height}" rx="#{rx}" ry="#{ry}" #{state_to_attributes(state)} />),
      state
    }
  end

  def draw({:line, x1, y1, x2, y2}, state) do
    {
      ~s(<line x1="#{x1}" y1="#{y1}" x2="#{x2}" y2="#{y2}" #{state_to_attributes(state)} />),
      state
    }
  end

  def draw({:set_stroke, color}, state) do
    {
      nil,
      put_in(state.stroke, color)
    }
  end

  def draw({:set_fill, color}, state) do
    {
      nil,
      put_in(state.fill, color)
    }
  end

  def draw({:set_stroke_width, color}, state) do
    {
      nil,
      put_in(state.stroke_width, color)
    }
  end

  def render(svg) do
    # Render the shapes
    shapes =
      svg.shapes
      |> Enum.reverse()
      |> Enum.reduce({svg.state, []}, fn shape, {state, shapes} ->
        {shape_text, new_state} = draw(shape, state)
        {new_state, [shape_text | shapes]}
      end)
      |> elem(1)
      |> Enum.reverse()
      |> Enum.join("\n")

    # Global styles
    global_style =
      svg.options
      |> Keyword.get(:global_style, %{})
      |> state_to_attributes()

    ~s(
    <svg width="#{svg.width}" height="#{svg.height}" viewBox="0 0 #{svg.width} #{svg.height}" xmlns="http://www.w3.org/2000/svg">
      <g #{global_style} >  
        #{shapes}
      </g>
    </svg>
    ) |> String.trim()
  end

  defp add_to_shapes(svg, shape) do
    Map.update!(svg, :shapes, &[shape | &1])
  end

  defp state_to_attributes(%{} = state) do
    style =
      state
      |> Map.to_list()
      |> Enum.map(fn {key, value} ->
        key =
          key
          |> Atom.to_string()
          |> String.replace("_", "-")

        ~s(#{key}:#{value})
      end)
      |> Enum.join(";")

    ~s(style="#{style}")
  end
end
```

```elixir
import SVGDraw

SVGDraw.new(200, 200)
|> circle(10, 10, 5)
|> set_stroke("green")
|> set_fill("red")
|> circle(100, 100, 5)
|> square(20, 20, 10)
|> set_stroke("black")
|> set_stroke_width("2")
|> line(10, 10, 100, 100)
|> set_fill("white")
|> set_stroke_width(4)
|> square(10, 100, 25)
|> render()
|> then(&Kino.Image.new(&1, :svg))
```

## Rope Grid

```elixir
defmodule RopeGrid do
  def new() do
    %{
      head: {0, 0},
      tail: {0, 0}
    }
  end

  def move(grid, :R, 1) do
    grid
    |> move_head(&increment_x/1)
    |> move_tail()
  end

  def move(grid, :U, 1) do
    grid
    |> move_head(&increment_y/1)
    |> move_tail()
  end

  def move_head(grid, mover) do
    Map.update!(grid, :head, mover)
  end

  # Head moved horizontally
  # def move_tail(%{head: {hx, hy}, tail: {tx, ty}} = grid) when hx == tx do
  #   grid
  # end

  def move_tail(grid) do
    distance_between =
      grid
      |> distance()
      |> subtract_one_clamp_zero()

    %{grid | tail: add_locations(grid.tail, distance_between)}
  end

  def increment_x({x, y}), do: {x + 1, y}
  def decrement_x({x, y}), do: {x - 1, y}
  def increment_y({x, y}), do: {x, y + 1}
  def decrement_y({x, y}), do: {x, y - 1}

  def distance(%{head: {hx, hy}, tail: {tx, ty}}) do
    {hx - tx, hy - ty}
  end

  def add_locations({x1, y1}, {x2, y2}) do
    {x1 + x2, y1 + y2}
  end

  def subtract_one_clamp_zero({x, y}) do
    {
      max(0, x - 1),
      max(0, y - 1)
    }
  end

  def draw(%{head: {hx, hy}, tail: {tx, ty}}, box_size \\ 10) do
    text_location = """
    Head Location: #{hx}, #{hy}<br />
    Tail Location: #{tx}, #{ty}

    """

    width = hx + 3
    height = hy + 3

    border_width = 1
    svg_width = width * box_size + border_width * 2
    svg_height = height * box_size + border_width * 2

    svg =
      SVGDraw.new(
        svg_width,
        svg_height,
        global_style: %{
          transform: "scaleY(-1)",
          transform_origin: "center"
        }
      )

    # Draw one big box around the outside
    svg =
      svg
      |> SVGDraw.set_stroke_width(border_width)
      |> SVGDraw.set_stroke("black")
      |> SVGDraw.set_fill("white")
      |> SVGDraw.rectangle(0, 0, svg_width, svg_height)

    # Draw boxes
    svg =
      for x <- Range.new(0, width), y <- Range.new(0, height), reduce: svg do
        svg ->
          svg
          |> SVGDraw.set_stroke_width(border_width)
          |> SVGDraw.set_stroke("black")
          |> then(fn svg ->
            cond do
              {x, y} == {0, 0} ->
                SVGDraw.set_fill(svg, "blue")

              {x, y} == {hx, hy} ->
                SVGDraw.set_fill(svg, "green")

              {x, y} == {tx, ty} ->
                SVGDraw.set_fill(svg, "red")

              true ->
                SVGDraw.set_fill(svg, "white")
            end
          end)
          |> SVGDraw.square(
            x * box_size + border_width,
            y * box_size + border_width,
            box_size
          )
      end

    Kino.Layout.grid([
      Kino.Markdown.new(text_location),
      svg
      |> SVGDraw.render()
      |> then(&Kino.Image.new(&1, :svg))
    ])
  end
end
```

```elixir
RopeGrid.new()
|> RopeGrid.move(:R, 1)
|> RopeGrid.move(:R, 1)
|> RopeGrid.move(:R, 1)
|> RopeGrid.move(:R, 1)
|> RopeGrid.move(:U, 1)
# |> RopeGrid.move(:U, 1)

|> RopeGrid.draw(20)
```

## Part 1

```elixir
example_input
```

```elixir
input
```

## Part 2

```elixir
example_input
```

```elixir
input
```
