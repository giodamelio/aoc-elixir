# 2021 Day 1

```elixir
Mix.install([
  {:kino, "~> 0.6.1"},
  {:kino_vega_lite, "~> 0.1.1"}
])

alias VegaLite, as: Vl
```

## Input

```elixir
raw_input = Kino.Input.textarea("Problem Input")
```

```elixir
defmodule AdventOfCode.InputFetcher do
  use Kino.JS
  use Kino.JS.Live
  # use Kino.SmartCell, name: "Advent of Code Input Fetcher"

  def new() do
    Kino.JS.Live.new(__MODULE__, %{})
  end

  @impl true
  def init(_state, ctx) do
    {:ok, ctx}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, nil, ctx}
  end

  @impl true
  def handle_event("fetch_input", data, ctx) do
    file_path = get_file_path()
    IO.puts(file_path)

    case File.read(file_path) do
      {:ok, _contents} ->
        :ok

      {:error, :enoent} ->
        case download_input(data["session"], data["year"], data["day"]) do
          {:ok, _, _headers, body} ->
            IO.puts(body)
            File.write!(file_path, body)

          err ->
            IO.puts("download error")
            IO.puts(err)
            :error
        end

      _ ->
        IO.puts("read error")
        :error
    end

    {:noreply, ctx}
  end

  defp get_file_path(extra \\ "input") do
    dir = Path.dirname(__ENV__.file)
    file = Path.basename(__ENV__.file, ".livemd#cell")
    Path.join([dir, "#{file}_#{extra}.txt"])
  end

  defp download_input(session, year, day) do
    :inets.start()
    :ssl.start()

    :httpc.request(
      :get,
      {"https://adventofcode.com/#{year}/day/#{day}/input",
       [
         {:binary.bin_to_list("Cookie"), "session=#{session}"}
       ]},
      [],
      []
    )
  end

  asset "main.js" do
    """
    export function init(ctx, data) {
      ctx.importCSS("main.css");

      ctx.root.innerHTML = `
        <div class="field">
          <label for="aoc_session">Session token</label>
          <input type="text" id="aoc_session" />
          <a href="javascript:undefined;" id="save_session">Save to localstorage</a>
        </div>

        <div class="field">
          <label for="aoc_year">Year</label>
          <input type="number" id="aoc_year" min="2015" max="2099" step="1" />
        </div>

        <div class="field">
          <label for="aoc_day">Day</label>
          <input type="number" id="aoc_day" min="1" max="25" />
        </div>

        <button id="aoc_fetch">Fetch and Save Input</button>
      `;

      // Allow easy reference of form elements
      const input_session = ctx.root.querySelector("#aoc_session");
      const input_year = ctx.root.querySelector("#aoc_year");
      const input_day = ctx.root.querySelector("#aoc_day");
      const button_fetch = ctx.root.querySelector("#aoc_fetch");

      // Handle saving the session token to localstorage
      document.getElementById("save_session").addEventListener("click", function() {
        if (input_session.value != "") {
          localStorage.setItem("advent_of_code_session_token", input_session.value);
        }
      });

      // Load the session token from localstorage if it exists
      const token = localStorage.getItem("advent_of_code_session_token");
      if (token) {
        input_session.value = token;
      }

      // Set default year
      const currentYear = new Date().getFullYear();
      input_year.value = currentYear;
      input_year.max = currentYear;

      // If it is December, set the default day to the current day,
      // otherwise, set it to one
      if (new Date().getMonth() === 11) {
        input_day.value = new Date().getDate()
      } else {
        input_day.value = 1
      }

      // Trigger the input fetch
      button_fetch.addEventListener("click", function() {
        ctx.pushEvent("fetch_input", {
          session: input_session.value,
          year: input_year.value,
          day: input_day.value
        })
      });
    }
    """
  end

  asset "main.css" do
    """
    .field, .field > label {
      display: block;
    }

    .field > a {
      font-size: 0.8em;
    }

    input, button {
      margin-bottom: 1em;
    }
    """
  end
end

# Kino.SmartCell.register(AdventOfCode.InputFetcher)
```

```elixir
AdventOfCode.InputFetcher.new()
```

```elixir
__ENV__.file
File.exists?("c:/Users/giodamelio/projects/aoc-elixir/2021/day-1_input.txt")
```

```elixir
:inets.start()
:ssl.start()

:httpc.request(
  :get,
  {"https://adventofcode.com/2021/day/1/input",
   [
     {:binary.bin_to_list("Cookie"),
      "session=53616c7465645f5fe18a4916226e2d7a3266cb7bd0f2ef47516824f0bb26fa1675cab1d9ed2d1ecf279b1afedc56fcaca867b85f73cf9ec3ae0b8de4539839af"}
   ]},
  [],
  []
)
```

## Parse

```elixir
input =
  Kino.Input.read(raw_input)
  |> String.split("\n")
  |> Enum.map(&String.to_integer/1)
```

Simple graph of the depth over time

```elixir
{min, max} = Enum.min_max(input)

# Initialize the specification, optionally with some top-level properties
Vl.new(width: 400)
# Specify data source for the graphic using one of the data_from_* functions
|> Vl.data_from_values(depth: input, time: 0..length(input))
# Pick a visual mark
|> Vl.mark(:line)
# Map data fields to visual properties of the mark, in this case point positions
|> Vl.encode_field(:y, "depth", type: :quantitative, scale: [domain: [min, max], reverse: true])
|> Vl.encode_field(:x, "time", type: :quantitative)
```

## Part 1

Count the number of times the depth increased

```elixir
defmodule Part1 do
  def count_increases(depths) do
    depths
    # Group into overlapping chunks of two
    |> Enum.chunk_every(2, 1, :discard)
    # Keep only the ones that are increases
    |> Enum.filter(fn [first, second] ->
      first < second
    end)
    # Count the remaining pairs
    |> Enum.count()
  end
end

Part1.count_increases(input)
```

## Part 2

Count the the increases in a sliding three wide window of depths

```elixir
input
|> Enum.chunk_every(3, 1, :discard)
|> Enum.map(&Enum.sum/1)
|> Part1.count_increases()
```
