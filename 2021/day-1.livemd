# 2021 Day 1

```elixir
Mix.install([
  {:kino, "~> 0.6.1"},
  {:kino_vega_lite, "~> 0.1.1"},
  {:kino_db, "~> 0.2.0"},
  {:postgrex, "~> 0.16.3"}
])

alias VegaLite, as: Vl
```

## Input

```elixir
raw_input = Kino.Input.textarea("Problem Input")
```

```elixir
defmodule AdventOfCode.InputFetcher do
  use Kino.JS
  use Kino.JS.Live
  use Kino.SmartCell, name: "Advent of Code Input Fetcher"

  def new() do
    Kino.JS.Live.new(__MODULE__, %{})
  end

  @impl true
  def init(attrs, ctx) do
    ctx =
      assign(ctx,
        year: attrs["year"] || "",
        day: attrs["day"] || "",
        input_example: attrs["input_example"] || "",
        input_real: attrs["input_real"] || ""
      )

    {:ok, ctx}
  end

  @impl true
  def handle_connect(ctx) do
    {:ok, nil, ctx}
  end

  @impl true
  def handle_event("submit", data, ctx) do
    IO.inspect(data)

    input_real =
      download_input(
        System.fetch_env!("LB_AOC_SESSION_TOKEN"),
        data["year"],
        data["day"]
      )

    IO.inspect(input_real)

    ctx =
      assign(
        ctx,
        year: data["year"],
        day: data["day"],
        input_example: data["example"],
        input_real: input_real
      )

    {:noreply, ctx}
  end

  @impl true
  def to_attrs(ctx) do
    %{
      "year" => ctx.assigns.year,
      "day" => ctx.assigns.day,
      "input_example" => ctx.assigns.input_example,
      "input_real" => ctx.assigns.input_real
    }
  end

  @impl true
  def to_source(attrs) do
    quote do
      raw_input_example = unquote(attrs["input_example"])
      :ok
    end
    |> Kino.SmartCell.quoted_to_string()
  end

  defp download_input(session, year, day) do
    :inets.start()
    :ssl.start()

    :httpc.request(
      :get,
      {"https://adventofcode.com/#{year}/day/#{day}/input",
       [
         {:binary.bin_to_list("Cookie"), "session=#{session}"}
       ]},
      [],
      []
    )
  end

  asset "main.js" do
    """
    export function init(ctx, data) {
      ctx.importCSS("main.css");

      ctx.root.innerHTML = `
        <form id="aoc_input">
          <div id="error"></div>

          <div id="input">
            <div class="field">
              <label>Year</label>
              <input type="number" name="year" min="2015" max="2099" step="1" />
            </div>

            <div class="field">
              <label>Day</label>
              <input type="number" name="day" min="1" max="25" />
            </div>

            <div class="field">
              <label>Paste Example Input Here</label>
              <textarea name="example" rows="10"></textarea>
            </div>

            <button name="submit">Fetch and Save</button>
          </div>
        </div>

        <div id="convert_screen" class="hidden">
          <p>Input and Example Input saved. Please convert this SmartCell to source.</p>
        </div>
      `;

      // Shortcuts for easy access
      const form = document.getElementById("aoc_input");
      const inputs = form.elements;

      // Set the default day and year
      // If it is December, set it to the current year and day
      // Otherwise, year to last year and day to 1
      const currentYear = new Date().getFullYear();
      inputs.year.max = currentYear;
      if (new Date().getMonth() === 11) {
        inputs.day.value = new Date().getDate()
        const currentYear = new Date().getFullYear();
        inputs.year.value = currentYear;
      } else {
        inputs.day.value = 1;
        inputs.year.value = currentYear - 1;
      }

      // Handle form submit
      inputs.submit.addEventListener("click", function(event) {
        ctx.pushEvent("submit", {
          year: inputs.year.value,
          day: inputs.day.value,
          example: inputs.example.value,
        });
      });
    };
    """
  end

  asset "main.css" do
    """
    .field, .field > label {
      display: block;
    }

    .field > a {
      font-size: 0.8em;
    }

    input, textarea {
      margin-bottom: 1em;
    }

    textarea {
      width: 80%
    }

    #error {
      background: #ff9194;
      padding: 0.5em;
      margin-bottom: 1em;
      border-radius: 3px;
    }

    #error:empty {
      display: none;
    }

    .hidden {
      display: none;
    }
    """
  end
end

Kino.SmartCell.register(AdventOfCode.InputFetcher)
```

<!-- livebook:{"attrs":{},"kind":"Elixir.AdventOfCode.InputFetcher","livebook_object":"smart_cell"} -->

```elixir
raw_input_example = ""
:ok
```

```elixir
System.fetch_env!("LB_AOC_SESSION_TOKEN")
```

## Parse

```elixir
input =
  Kino.Input.read(raw_input)
  |> String.split("\n")
  |> Enum.map(&String.to_integer/1)
```

Simple graph of the depth over time

```elixir
{min, max} = Enum.min_max(input)

# Initialize the specification, optionally with some top-level properties
Vl.new(width: 400)
# Specify data source for the graphic using one of the data_from_* functions
|> Vl.data_from_values(depth: input, time: 0..length(input))
# Pick a visual mark
|> Vl.mark(:line)
# Map data fields to visual properties of the mark, in this case point positions
|> Vl.encode_field(:y, "depth", type: :quantitative, scale: [domain: [min, max], reverse: true])
|> Vl.encode_field(:x, "time", type: :quantitative)
```

## Part 1

Count the number of times the depth increased

```elixir
defmodule Part1 do
  def count_increases(depths) do
    depths
    # Group into overlapping chunks of two
    |> Enum.chunk_every(2, 1, :discard)
    # Keep only the ones that are increases
    |> Enum.filter(fn [first, second] ->
      first < second
    end)
    # Count the remaining pairs
    |> Enum.count()
  end
end

Part1.count_increases(input)
```

## Part 2

Count the the increases in a sliding three wide window of depths

```elixir
input
|> Enum.chunk_every(3, 1, :discard)
|> Enum.map(&Enum.sum/1)
|> Part1.count_increases()
```
